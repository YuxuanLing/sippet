# Copyright (c) 2013-2018 The Sippet Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//testing/test.gni")

use_v8_in_net = !is_ios && !is_android

component("sippet") {
  sources = [
    "message/message.h",
    "message/message.cc",
    "message/request.h",
    "message/request.cc",
    "message/response.h",
    "message/response.cc",
    "message/sip_util.h",
    "message/sip_util.cc",
    "message/sip_version.h",
    "transaction_config.h",
    "transaction_config.cc",
    "transaction_layer.h",
    "transaction_layer.cc",
    "transaction_layer_factory.h",
    "transaction_layer_impl.h",
    "transaction_layer_impl.cc",
    "transaction_layer_core.h",
    "transaction_layer_core.cc",
    "client_transaction.h",
    "client_transaction.cc",
    "server_transaction.h",
    "server_transaction.cc",
  ]

  defines = [ "SIPPET_IMPLEMENTATION" ]

  public_deps = [
    "//base",
    "//net",
    ":build_version"
  ]

  deps = [
    "//url:url",
    "//net:net",
  ]
}

component("sippet_test_support") {
  testonly = true
  sources = [
    "transport/chrome/transport_test_util.h",
  ]

  deps = [
    "//third_party/icu",
  ]

  public_deps = [
    "//testing/gtest",
    "//testing/gmock",
    ":sippet",
  ]
}

test("sippet_unittests") {
  sources = [
    "../net/test/run_all_unittests.cc",
    "message/message_unittest.cc",
  ]

  deps = [
    "//base/test:test_support",
    "//net:test_support",
    ":sippet_test_support",
    ":sippet",
  ]

  if (use_v8_in_net) {
    deps += [
      "//mojo/edk/system",
    ]
  }
}

action("build_version") {
  script = "//sippet/build/sippet_version.py"
  lastchange = "//build/util/LASTCHANGE"
  template = "//sippet/build/sippet_version.h.in"
  generated = "$target_gen_dir/sippet_version.h"

  # Force recalculation if there's been a change.
  inputs = [
    script, lastchange, template,
  ]
  outputs = [
    generated,
  ]

  args = [
    "-f", rebase_path(lastchange),
    rebase_path(template),
    rebase_path(generated)
  ]
}
